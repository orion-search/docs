(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{104:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return b})),r.d(t,"default",(function(){return p}));var a=r(2),n=r(6),o=(r(0),r(137)),i={},c={id:"Operators",isDocsHomePage:!1,title:"Operators",description:"Airflow Operators in Orion",source:"@site/docs/Operators.mdx",permalink:"/docs/docs/Operators",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Operators.mdx",sidebar:"docs",previous:{title:"The model config file",permalink:"/docs/docs/The model config file"},next:{title:"Running Orion's ETL",permalink:"/docs/docs/running_etl"}},b=[{value:"<code>AffiliationTypeOperator</code>",id:"affiliationtypeoperator",children:[]},{value:"<code>RCAOperator</code>",id:"rcaoperator",children:[]},{value:"<code>ResearchDiversityOperator</code>",id:"researchdiversityoperator",children:[]},{value:"<code>GenderDiversityOperator</code>",id:"genderdiversityoperator",children:[]},{value:"<code>WBIndicatorOperator</code>",id:"wbindicatoroperator",children:[]},{value:"<code>HomogeniseCountryNamesOperator</code>",id:"homogenisecountrynamesoperator",children:[]},{value:"<code>CountryDetailsOperator</code>",id:"countrydetailsoperator",children:[]},{value:"<code>CreateVizTables</code>",id:"createviztables",children:[]},{value:"<code>DimReductionOperator</code>",id:"dimreductionoperator",children:[]},{value:"<code>CountryCollaborationOperator</code>",id:"countrycollaborationoperator",children:[]},{value:"<code>CountrySimilarityOperator</code>",id:"countrysimilarityoperator",children:[]},{value:"<code>FaissIndexOperator</code>",id:"faissindexoperator",children:[]},{value:"<code>NamesBatchesOperator</code>",id:"namesbatchesoperator",children:[]},{value:"<code>GenderInferenceOperator</code>",id:"genderinferenceoperator",children:[]},{value:"<code>MagCollectionOperator</code>",id:"magcollectionoperator",children:[]},{value:"<code>MagFosCollectionOperator</code>",id:"magfoscollectionoperator",children:[]},{value:"<code>GeocodingOperator</code>",id:"geocodingoperator",children:[]},{value:"<code>MagParserOperator</code>",id:"magparseroperator",children:[]},{value:"<code>FosFrequencyOperator</code>",id:"fosfrequencyoperator",children:[]},{value:"<code>OpenAccessJournalOperator</code>",id:"openaccessjournaloperator",children:[]},{value:"<code>Postgreqsl2ElasticSearchOperator</code>",id:"postgreqsl2elasticsearchoperator",children:[]},{value:"<code>Text2VectorOperator</code>",id:"text2vectoroperator",children:[]},{value:"<code>Text2TfidfOperator</code>",id:"text2tfidfoperator",children:[]},{value:"<code>Text2SentenceBertOperator</code>",id:"text2sentencebertoperator",children:[]},{value:"<code>FilterTopicsByDistributionOperator</code>",id:"filtertopicsbydistributionoperator",children:[]},{value:"<code>FilteredTopicsMetadataOperator</code>",id:"filteredtopicsmetadataoperator",children:[]},{value:"<code>PythonOperator(&quot;S3_BUCKET_NAME&quot;)</code>",id:"pythonoperators3_bucket_name",children:[]},{value:"<code>PythonOperator(&quot;create_tables&quot;)</code>",id:"pythonoperatorcreate_tables",children:[]},{value:"<code>DummyOperators</code>",id:"dummyoperators",children:[]}],l={rightToc:b};function p(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"airflow-operators-in-orion"},"Airflow Operators in Orion"),Object(o.b)("p",null,"Every operator fetches data from a ",Object(o.b)("strong",{parentName:"p"},"PostgreSQL")," database, ",Object(o.b)("strong",{parentName:"p"},"AWS S3")," or an ",Object(o.b)("strong",{parentName:"p"},"API"),", applies a set of transformations and stores them in a PostgreSQL database or AWS S3. We list Orion's operators below:"),Object(o.b)("h2",{id:"affiliationtypeoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"AffiliationTypeOperator")),Object(o.b)("p",null,"Splits the affiliations to industry (= 0) and non-industry (= 1) using a seed list of tokens. The seed list can be found in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"rcaoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"RCAOperator")),Object(o.b)("p",null,"Measures the country-level and affiliation-level thematic topic specialisation on an annual basis using the Revealed Comparative Advantage (RCA). It creates this indicator by summing the number of citations of a country (or affiliation) on a particular topic. An entity with an RCA > 1 is more specialised on a topic than the rest of the entities. Before measuring RCA, it filters publications by year and the countries by their number of papers. You can change the thresholds in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,"Note that instead of summing citations to measure the RCA, you can use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/orion-search/orion/blob/dev/orion/packages/metrics/metrics.py#L59"}),"number of papers.")," "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"researchdiversityoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"ResearchDiversityOperator")),Object(o.b)("p",null,"Measures the country-level research diversity for each topic on an annual basis. For each topic, it recursively collects its children topics and creates a country-level count vector. It measures diversity with the Shannon-Wiener and Simpson indexes. You can filter countries by the number of Fields of Study they have used and the papers by their publication year. You can modify the thresholds in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"genderdiversityoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"GenderDiversityOperator")),Object(o.b)("p",null,"Measures the country-level gender diversity for each topic on an annual basis. For each topic and year, it first finds the share of women in each publication and then averages it to create the indicator. You can filter countries by their number of publications and author names by the accuracy of the name-gender-inference service. You can modify the thresholds in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"wbindicatoroperator"},Object(o.b)("inlineCode",{parentName:"h2"},"WBIndicatorOperator")),Object(o.b)("p",null,"Collects country-level World Bank indicators using\xa0",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pydata/pandas-datareader"}),"pandas-datareader"),", a Python package that gives access to\xa0",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://pandas-datareader.readthedocs.io/en/latest/readers/index.html"}),"economic databases"),". You can choose indicators and filter them by timeframe and country in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),". "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"If you plan to collect indicators that are not listed here, you have to create an ORM for them.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": World Bank API",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"homogenisecountrynamesoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"HomogeniseCountryNamesOperator")),Object(o.b)("p",null,"Homogenises country names from Google Places API and the World Bank. It uses a country mapping dictionary from ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"countrydetailsoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"CountryDetailsOperator")),Object(o.b)("p",null,"Fetches additional country details such as continent, country code and population from the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://restcountries.eu/"}),"restcountries API"),". "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL, restcountries API",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"createviztables"},Object(o.b)("inlineCode",{parentName:"h2"},"CreateVizTables")),Object(o.b)("p",null,"Creates the following tables that are used in the front-end:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CountryTopicOutput"),": Shows a country's total citations and paper volume by year and topic."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AllMetrics"),": Combines all the metrics (gender diversity, research diversity, RCA) we've derived by year and topic."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"PaperCountry"),": Shows the paper IDs of a country. Used in the particle visualisation."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"PaperTopics"),": Shows the paper IDs of a topic. Used in the particle visualisation."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"PaperYear"),": Shows the paper IDs of a year. Used in the particle visualisation.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Topics are fetched from the ",Object(o.b)("inlineCode",{parentName:"p"},"FilteredFos")," table.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"dimreductionoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"DimReductionOperator")),Object(o.b)("p",null,"Transforms high dimensional arrays to 3D using UMAP. The output table is used in the front-end. You can filter documents by their character length or exclude them using their MAG ID. You can also tune UMAP's hyperparameters. This configuration is done in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"countrycollaborationoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"CountryCollaborationOperator")),Object(o.b)("p",null,"Draws a collaboration graph between countries based on the author affiliations. Papers are filtered by their publication year. You can modify this in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"countrysimilarityoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"CountrySimilarityOperator")),Object(o.b)("p",null,"Finds the similarity between countries based on their abstracts. It averages the abstract vectors of a country to create a country vector. Uses the text vectors that were calculated from the ",Object(o.b)("inlineCode",{parentName:"p"},"text2vector")," task. You can filter papers by publication year and choose the number of similar countries to return by modifying the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"faissindexoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"FaissIndexOperator")),Object(o.b)("p",null,"Creates a FAISS index using the text vectors that were calculated from the ",Object(o.b)("inlineCode",{parentName:"p"},"text2vector")," task."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": AWS S3"),Object(o.b)("h2",{id:"namesbatchesoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"NamesBatchesOperator")),Object(o.b)("p",null,"Fetches authors' full names and removes those with just an initial. It stores the rest of the author names in batches. You can specify the number of batches in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),". "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": AWS S3"),Object(o.b)("h2",{id:"genderinferenceoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"GenderInferenceOperator")),Object(o.b)("p",null,"Infers an authors' gender using their full name. This is a batch task and you have to define the number of batches in the ",Object(o.b)("inlineCode",{parentName:"p"},"NamesBatchesOperator"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": AWS S3",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"magcollectionoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"MagCollectionOperator")),Object(o.b)("p",null,"Queries Microsoft Academic Knowledge API with a conference, journal or field of study. You can modify the task by tweaking the following parameters in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"with_doi"),": If ",Object(o.b)("inlineCode",{parentName:"li"},"true"),", it collects only documents with a DOI."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"mag_start_date"),": Starting date for the data collection. This corresponds to the paper publication date."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"mag_end_date"),": Ending date for the data collection. This corresponds to the paper publication date."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"intervals_in_a_year"),": The number of time periods in a year. MAG throttles computationally costly queries. The higher the number of the ",Object(o.b)("inlineCode",{parentName:"li"},"intervals_in_a_year"),", the lower the chance for your request to be throttled."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"metadata"),": The fields from MAG to be collected."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"query_values"),": Name of your query (for example, ",Object(o.b)("em",{parentName:"li"},"biorxiv"),"),"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"entity_name"),": Specify if you are collecting a journal, conference or field of study.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Possible values in the ",Object(o.b)("inlineCode",{parentName:"p"},"entity_name"),":"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"Field of study: ",Object(o.b)("inlineCode",{parentName:"li"},"F.FN")),Object(o.b)("li",{parentName:"ul"},"Conference: ",Object(o.b)("inlineCode",{parentName:"li"},"C.CN")," "),Object(o.b)("li",{parentName:"ul"},"Journal: ",Object(o.b)("inlineCode",{parentName:"li"},"J.JN")))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": Microsoft Academic Knowledge API",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": AWS S3"),Object(o.b)("h2",{id:"magfoscollectionoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"MagFosCollectionOperator")),Object(o.b)("p",null,"Fetches Fields of Study IDs and collects their level in the hierarchy, child and parent Fields of Study from Microsoft Academic Graph."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"geocodingoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"GeocodingOperator")),Object(o.b)("p",null,"Geocodes affiliations names."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"magparseroperator"},Object(o.b)("inlineCode",{parentName:"h2"},"MagParserOperator")),Object(o.b)("p",null,"Fetches and parses MAG responses and populates Orion's database."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": AWS S3",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"fosfrequencyoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"FosFrequencyOperator")),Object(o.b)("p",null,"Calculates the frequency of Fields of Study."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"openaccessjournaloperator"},Object(o.b)("inlineCode",{parentName:"h2"},"OpenAccessJournalOperator")),Object(o.b)("p",null,"Splits the journals to non-open access (= 0) and open access (= 1) using a seed list of tokens. You can modify the seed list in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"postgreqsl2elasticsearchoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"Postgreqsl2ElasticSearchOperator")),Object(o.b)("p",null,"Migrates some data from PostgreSQL to Elasticsearch and creates an index with the following metadata for every paper:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Title"),Object(o.b)("li",{parentName:"ul"},"Abstract"),Object(o.b)("li",{parentName:"ul"},"Citations"),Object(o.b)("li",{parentName:"ul"},"Publication date"),Object(o.b)("li",{parentName:"ul"},"Publication year"),Object(o.b)("li",{parentName:"ul"},"Field of study ID"),Object(o.b)("li",{parentName:"ul"},"Field of study name"),Object(o.b)("li",{parentName:"ul"},"Author name"),Object(o.b)("li",{parentName:"ul"},"Author affiliation")),Object(o.b)("p",null,"By default, it deletes the index (if it exists) before indexing documents. You can modify this in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": AWS Elasticsearch service"),Object(o.b)("h2",{id:"text2vectoroperator"},Object(o.b)("inlineCode",{parentName:"h2"},"Text2VectorOperator")),Object(o.b)("p",null,"Uses a pretrained model (DistilBERT) from the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/huggingface/transformers"}),"transformers")," library to create word vectors which are then averaged to produce a document vector. "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Using a GPU for this task will decrease the vector inference time.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"text2tfidfoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"Text2TfidfOperator")),Object(o.b)("p",null,"Transforms text to vectors using TF-IDF and SVD. TF-IDF from scikit-learn preprocesses the data and SVD reduces the dimensionality of the document vectors. "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This is the fastest text vectorisation method in Orion and should be your first choice.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target:")," PostgreSQL"),Object(o.b)("h2",{id:"text2sentencebertoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"Text2SentenceBertOperator")),Object(o.b)("p",null,"Creates sentence-level embeddings using a pretrained ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/UKPLab/sentence-transformers"}),"sentence DistilBERT model"),". It batches documents to speed up the inference. You can modify the batch size and choose another BERT model in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Using a GPU for this task will decrease the vector inference time.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target:")," PostgreSQL"),Object(o.b)("h2",{id:"filtertopicsbydistributionoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"FilterTopicsByDistributionOperator")),Object(o.b)("p",null,"Filter topics by level in the MAG hierarchy and frequency. These topics are used to calculate the Orion's metrics and are shown in the front-end. You can modify the level and frequency thresholds in the ",Object(o.b)("inlineCode",{parentName:"p"},"model_config.yaml"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": PostgreSQL",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": AWS S3"),Object(o.b)("h2",{id:"filteredtopicsmetadataoperator"},Object(o.b)("inlineCode",{parentName:"h2"},"FilteredTopicsMetadataOperator")),Object(o.b)("p",null,"Creates a table with the filtered Fields of Study, their children, annual citation sum and paper count."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Source"),": AWS S3",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Target"),": PostgreSQL"),Object(o.b)("h2",{id:"pythonoperators3_bucket_name"},Object(o.b)("inlineCode",{parentName:"h2"},'PythonOperator("S3_BUCKET_NAME")')),Object(o.b)("p",null,"Creates Orion's S3 buckets. The Airflow task is named after the S3 bucket it creates."),Object(o.b)("h2",{id:"pythonoperatorcreate_tables"},Object(o.b)("inlineCode",{parentName:"h2"},'PythonOperator("create_tables")')),Object(o.b)("p",null,"Creates Orion's PostgreSQL tables and instantiates a database if it does not exist."),Object(o.b)("h2",{id:"dummyoperators"},Object(o.b)("inlineCode",{parentName:"h2"},"DummyOperators")),Object(o.b)("p",null,"Orion uses a number of ",Object(o.b)("inlineCode",{parentName:"p"},"DummyOperators")," to ease the visual navigation of the DAG. These tasks do not transform or move data around. We list them below:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'dummy_task = DummyOperator(task_id="start")\ndummy_task_2 = DummyOperator(task_id="gender_agg")\ndummy_task_3 = DummyOperator(task_id="world_bank_indicators")\ndummy_task_4 = DummyOperator(task_id="create_s3_buckets")\ndummy_task_5 = DummyOperator(task_id="s3_buckets")\n')))}p.isMDXComponent=!0},137:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function b(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=n.a.createContext({}),p=function(e){var t=n.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=p(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=b(e,["components","mdxType","originalType","parentName"]),s=p(r),u=a,m=s["".concat(i,".").concat(u)]||s[u]||d[u]||o;return r?n.a.createElement(m,c(c({ref:t},l),{},{components:r})):n.a.createElement(m,c({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);